name: Vitefest Release CI

# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0来触发工作流

# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
 
    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
 
      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'Vitefest ${{ steps.get_version.outputs.VERSION }}'
          body: 'Download the cli, or pre-packed template please.'

  
  # 编译 CLI
  build-cli:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, macos-arm64, ubuntu-latest, windows-latest]
 
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
 
    # 安装 Stable Rust
    - name: Install Rust Stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
 
    # 使用 Rust 缓存，加快安装速度
    - uses: Swatinem/rust-cache@v1

    # ubuntu环境安装依赖
    - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

    # 安装依赖执行构建，以及推送 github release
    - name: Install app dependencies and build it

    # package.json里面配置的编译命令
      run: |
        if [[ ${{ matrix.platform }} == 'macos-latest' ]]; then
          # 在Intel macOS上执行构建命令
          rustup target install x86_64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
        elif [[ ${{ matrix.platform }} == 'macos-arm64' ]]; then
          # 在Apple Silicon macOS上执行构建命令
          rustup target install aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
        else
          # 在其他平台上执行构建命令
          cargo build --release
        fi
    - uses: actions/checkout@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}